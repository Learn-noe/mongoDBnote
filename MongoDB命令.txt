开启mongo服务器 
	// 开启服务，设置数据库路径，设置存储的引擎为amppv1
	mongod --dbpath d:/data/db --storageEngine=mmapv1

	// mongo服务启动后，默认监听的端口号是 27017

// 在其他命令窗口使用mongo命令连接服务器(服务器所在窗口不要关闭)
	C:\Users\xiaohu>mongo 
	MongoDB shell version: 3.2.10

	// 默认连接的是test数据库
	connecting to: test
	>

数据库命令
1. 查看当前数据库系统下所有的数据库
> show dbs
local  0.078GB
>

2. 选择或创建数据库 -- 当数据不存在时自动创建
> use school
switched to db school
>

3. 创建一个集合 
	// 创建集合
> db.createCollection('demo')
{ "ok" : 1 }

	// db.collection_name.insert() 当集合不存在时自动创建，存在则是插入一条新数据
> db.stu.insert({'name':'孙悟空','age':'1000','sex':'1','class':'花果山'})
WriteResult({ "nInserted" : 1 })
>

3. 显示当前数据库下所有的集合collections
> show collections
stu

// 该集合存储的是当前数据库下所有集合的索引
system.indexes
>

	// 修改集合名称
> db.demo.renameCollection('aaa')
{ "ok" : 1 }


4. 查看stu集合中所有的数据(文档)
> db.stu.find()
{ "_id" : ObjectId("581240127b6159347c2f096d"), "name" : "孙悟空", "age" : "1000", "sex" : "1", "class" : "花果山" }
{ "_id" : ObjectId("581241df7b6159347c2f096f"), "name" : "唐僧", "age" : "100","sex" : 1, "class" : "大唐" }
>

5. 查看stu集合中的一条数据
> db.stu.findOne()
{
        "_id" : ObjectId("581240127b6159347c2f096d"),
        "name" : "孙悟空",
        "age" : "1000",
        "sex" : "1",
        "class" : "花果山"
}
>

6. 查询stu集合中所有的数据，并格式化输出pretty()
> db.stu.find().pretty()
{
        "_id" : ObjectId("581240127b6159347c2f096d"),
        "name" : "孙悟空",
        "age" : "1000",
        "sex" : "1",
        "class" : "花果山"
}
{
        "_id" : ObjectId("581241df7b6159347c2f096f"),
        "name" : "唐僧",
        "age" : "100",
        "sex" : 1,
        "class" : "大唐"
}
>

7. 更新数据 update()
	// 将name值为唐僧的该条文档中的age字段的值修改为121
> db.stu.update({"name":"唐僧"},{"age":"121"})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
>

8. 更新获取新建数据 save()
	// 没有指定 _id 字段为新建
> db.stu.save({ "name" : "沙僧", "age" : "100", "sex" : 1, "class" : "流沙河" })
WriteResult({ "nInserted" : 1 })
>
	// 指定了 _id 字段：该值存在，则为更新；否则为新建
> db.stu.save({"_id" : ObjectId("581240127b6159347c2f096d"),"name":"孙悟空","age
":"999","sex":1,"class":"花果山"})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })

9. 删除集合数据
	// 删除name值为孙悟空的数据
> db.stu.remove({"name":"孙悟空"})
WriteResult({ "nRemoved" : 2 })
>
	// 删除集合中所有的文档 remove({}) 清空表数据，集合在，索引也在
> db.stu.remove({})
WriteResult({ "nRemoved" : 3 })
>	
	// 删除stu集合 -- 集合消失，索引消失
> db.stu.drop()
true
> 
	
10. 显示当前所在的数据库  db 或者 db.getName
> db
school
>

11. 删除当前数据库 -- 切换到数据库的位置
> db.dropDatabase()
{ "dropped" : "school", "ok" : 1 }
>

12. 关于条件	
	// 等于 == {"name":"孙悟空"}
> db.stu.find({"name":"孙悟空"})
{ "_id" : ObjectId("58124fa47b6159347c2f0973"), "name" : "孙悟空", "age" : "999", "sex" : 1, "class" : "花果山" }
>
	// 查询年龄>200的所有数据
> db.stu.find({"age":{$gt:200}})
{ "_id" : ObjectId("5812519a7b6159347c2f0979"), "name" : "太上老君", "age" : 201
, "sex" : 1, "class" : "兜率宫" }
{ "_id" : ObjectId("581252367b6159347c2f097b"), "name" : "通天教主", "age" : 205
, "sex" : 1, "class" : "碧游宫" }
>
	// 查询年龄>=200的所有数据
> db.stu.find({"age":{$gte:200}})
{ "_id" : ObjectId("5812519a7b6159347c2f0979"), "name" : "太上老君", "age" : 201
, "sex" : 1, "class" : "兜率宫" }
{ "_id" : ObjectId("581252367b6159347c2f097b"), "name" : "通天教主", "age" : 205
, "sex" : 1, "class" : "碧游宫" }
{ "_id" : ObjectId("581252f47b6159347c2f097d"), "name" : "蜘蛛精", "age" : 200,
"sex" : 2, "class" : "盘丝洞" }
>
	// 查询年龄<200的所有数据
> db.stu.find({"age":{$lt:200}})
{ "_id" : ObjectId("58124fe97b6159347c2f0974"), "name" : "唐僧", "age" : 121, "s
ex" : 1, "class" : "大唐" }
{ "_id" : ObjectId("581251b77b6159347c2f097a"), "name" : "元始天尊", "age" : 105
, "sex" : 1, "class" : "昆仑山" }
{ "_id" : ObjectId("5812524e7b6159347c2f097c"), "name" : "王母", "age" : 20, "se
x" : 2, "class" : "瑶池" }
>
	// 查询年龄<=200的所有数据
> db.stu.find({"age":{$lte:200}})
{ "_id" : ObjectId("58124fe97b6159347c2f0974"), "name" : "唐僧", "age" : 121, "s
ex" : 1, "class" : "大唐" }
{ "_id" : ObjectId("581251b77b6159347c2f097a"), "name" : "元始天尊", "age" : 105
, "sex" : 1, "class" : "昆仑山" }
{ "_id" : ObjectId("5812524e7b6159347c2f097c"), "name" : "王母", "age" : 20, "se
x" : 2, "class" : "瑶池" }
{ "_id" : ObjectId("581252f47b6159347c2f097d"), "name" : "蜘蛛精", "age" : 200,
"sex" : 2, "class" : "盘丝洞" }
>

	// != 不等 查询不是男性的数据
> db.stu.find({"sex":{$ne:1}})
{ "_id" : ObjectId("5812524e7b6159347c2f097c"), "name" : "王母", "age" : 20, "se
x" : 2, "class" : "瑶池" }
{ "_id" : ObjectId("581252f47b6159347c2f097d"), "name" : "蜘蛛精", "age" : 200,
"sex" : 2, "class" : "盘丝洞" }
>
	// AND 条件 查询男性并且年龄<=120的数据
> db.stu.find({"sex":1,"age":{$lt:120}})
{ "_id" : ObjectId("581251b77b6159347c2f097a"), "name" : "元始天尊", "age" : 105
, "sex" : 1, "class" : "昆仑山" }
>

	// OR 条件 查询age>=500 或者 <= 100的数据
> db.stu.find({$or:[{"age":{$lte:100}},{"age":"$gte:500"}]})
{ "_id" : ObjectId("5812524e7b6159347c2f097c"), "name" : "王母", "age" : 20, "se
x" : 2, "class" : "瑶池" }
>
	// 使用正则作为条件
> db.stu.find({"name":/天/})
{ "_id" : ObjectId("581251b77b6159347c2f097a"), "name" : "元始天尊", "age" : 105
, "sex" : 1, "class" : "昆仑山" }
{ "_id" : ObjectId("581252367b6159347c2f097b"), "name" : "通天教主", "age" : 205
, "sex" : 1, "class" : "碧游宫" }
>
	// 去除重复的数据
> db.stu.distinct('age')
[ 999, 121, 120, 100, 201, 105, 205, 20, 200 ]

	// 获取结果集条数
> db.stu.find().count()
10
>

13. 关于排序 sort() 1 表示升序；-1 表示降序
	// 查询数据按照年龄排序 -- 升序 sort({key:1})
> db.stu.find().sort({age:1})
{ "_id" : ObjectId("5812524e7b6159347c2f097c"), "name" : "王母", "age" : 20, "se
x" : 2, "class" : "瑶池" }
{ "_id" : ObjectId("581250167b6159347c2f0977"), "name" : "沙僧", "age" : 100, "s
ex" : 1, "class" : "流沙河" }
{ "_id" : ObjectId("581250347b6159347c2f0978"), "name" : "小白龙", "age" : 100,
"sex" : 2, "class" : "西海龙宫" }
{ "_id" : ObjectId("581251b77b6159347c2f097a"), "name" : "元始天尊", "age" : 105
, "sex" : 1, "class" : "昆仑山" }
{ "_id" : ObjectId("581250077b6159347c2f0976"), "name" : "猪八戒", "age" : 120,
"sex" : 1, "class" : "高老庄" }
{ "_id" : ObjectId("58124fe97b6159347c2f0974"), "name" : "唐僧", "age" : 121, "s
ex" : 1, "class" : "大唐" }
{ "_id" : ObjectId("581252f47b6159347c2f097d"), "name" : "蜘蛛精", "age" : 200,
"sex" : 2, "class" : "盘丝洞" }
{ "_id" : ObjectId("5812519a7b6159347c2f0979"), "name" : "太上老君", "age" : 201
, "sex" : 1, "class" : "兜率宫" }
{ "_id" : ObjectId("581252367b6159347c2f097b"), "name" : "通天教主", "age" : 205
, "sex" : 1, "class" : "碧游宫" }
{ "_id" : ObjectId("58124fa47b6159347c2f0973"), "name" : "孙悟空", "age" : 999,
"sex" : 1, "class" : "花果山" }
>
	// 先按年龄升序，再按性别降序 sort({key1:1,key2:-1})
> db.stu.find().sort({age:1,sex:-1})
{ "_id" : ObjectId("5812524e7b6159347c2f097c"), "name" : "王母", "age" : 20, "se
x" : 2, "class" : "瑶池" }
{ "_id" : ObjectId("581250347b6159347c2f0978"), "name" : "小白龙", "age" : 100,
"sex" : 2, "class" : "西海龙宫" }
{ "_id" : ObjectId("581250167b6159347c2f0977"), "name" : "沙僧", "age" : 100, "s
ex" : 1, "class" : "流沙河" }
{ "_id" : ObjectId("581251b77b6159347c2f097a"), "name" : "元始天尊", "age" : 105
, "sex" : 1, "class" : "昆仑山" }
{ "_id" : ObjectId("581250077b6159347c2f0976"), "name" : "猪八戒", "age" : 120,
"sex" : 1, "class" : "高老庄" }
{ "_id" : ObjectId("58124fe97b6159347c2f0974"), "name" : "唐僧", "age" : 121, "s
ex" : 1, "class" : "大唐" }
{ "_id" : ObjectId("581252f47b6159347c2f097d"), "name" : "蜘蛛精", "age" : 200,
"sex" : 2, "class" : "盘丝洞" }
{ "_id" : ObjectId("5812519a7b6159347c2f0979"), "name" : "太上老君", "age" : 201
, "sex" : 1, "class" : "兜率宫" }
{ "_id" : ObjectId("581252367b6159347c2f097b"), "name" : "通天教主", "age" : 205
, "sex" : 1, "class" : "碧游宫" }
{ "_id" : ObjectId("58124fa47b6159347c2f0973"), "name" : "孙悟空", "age" : 999,
"sex" : 1, "class" : "花果山" }
>

	// 只输出指定字段的值
> db.stu.find({},{age:true,name:true})
{ "_id" : ObjectId("58124fa47b6159347c2f0973"), "name" : "孙悟空", "age" : 999 }

{ "_id" : ObjectId("58124fe97b6159347c2f0974"), "name" : "唐僧", "age" : 121 }
{ "_id" : ObjectId("581250077b6159347c2f0976"), "name" : "猪八戒", "age" : 120 }

{ "_id" : ObjectId("581250167b6159347c2f0977"), "name" : "xxx", "age" : 200 }
{ "_id" : ObjectId("581250347b6159347c2f0978"), "name" : "小白龙", "age" : 100 }

{ "_id" : ObjectId("5812519a7b6159347c2f0979"), "name" : "太上老君", "age" : 201
 }
{ "_id" : ObjectId("581251b77b6159347c2f097a"), "name" : "元始天尊", "age" : 105
 }
{ "_id" : ObjectId("581252367b6159347c2f097b"), "name" : "通天教主", "age" : 205
 }
{ "_id" : ObjectId("5812524e7b6159347c2f097c"), "name" : "王母", "age" : 20 }
{ "_id" : ObjectId("581252f47b6159347c2f097d"), "name" : "蜘蛛精", "age" : 200 }

{ "_id" : ObjectId("5812df50396548057d132690"), "age" : 100 }
>


14. 关于聚合（分组） aggregate()
	// 按性别分组
> db.stu.aggregate([{$group:{_id:"$sex"}}])
{ "_id" : 2 }
{ "_id" : 1 }
>
	// 计算男女的数量
> db.stu.aggregate([{$group:{_id:"$sex",num:{$sum:1}}}]);
{ "_id" : 2, "num" : 3 }
{ "_id" : 1, "num" : 7 }
>

15. 关于限制查询 limit()方法  和 skip()方法
	// 获取2条数据
> db.stu.find().limit(2)
{ "_id" : ObjectId("58124fa47b6159347c2f0973"), "name" : "孙悟空", "age" : 999,
"sex" : 1, "class" : "花果山" }
{ "_id" : ObjectId("58124fe97b6159347c2f0974"), "name" : "唐僧", "age" : 121, "s
ex" : 1, "class" : "大唐" }
>

	// 按照年龄降序排列，取出2条数据
> db.stu.find().sort({age:-1}).limit(2)
{ "_id" : ObjectId("58124fa47b6159347c2f0973"), "name" : "孙悟空", "age" : 999,
"sex" : 1, "class" : "花果山" }
{ "_id" : ObjectId("581252367b6159347c2f097b"), "name" : "通天教主", "age" : 205
, "sex" : 1, "class" : "碧游宫" }
>

	// 按照年龄降序排列，跳过2条，显示2条
> db.stu.find().sort({age:-1}).skip(2).limit(2)
{ "_id" : ObjectId("5812519a7b6159347c2f0979"), "name" : "太上老君", "age" : 201
, "sex" : 1, "class" : "兜率宫" }
{ "_id" : ObjectId("581252f47b6159347c2f097d"), "name" : "蜘蛛精", "age" : 200,
"sex" : 2, "class" : "盘丝洞" }
>

16. 关于update更新数据
	db.stu.update(条件,目的值,不存在是否自动添加,是否允许多选)

	// 以name=xxx为条件进行更新
> db.stu.update({name:'xxx'},{'name':'ooo',age:100});
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
>
	// 全部数据都修改
> db.stu.update({name:'ooo'},{age:100});
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
>
	// 修改指定的字段 $set
	// 用法：{$set:{field:value}}
	// 作用：把文档中某个字段field的值设为value
> db.stu.update({name:'xxx'},{$set:{age:200}});
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
>

	// $inc 
	// 用法：{$inc:{field:value}}
	// 作用：对一个数字字段的某个field增加value
> db.stu.update({name:'ooo'},{$inc:{age:30}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> 
	$unset
	用法：{$unset:{field:1}}
	作用：删除某个字段field
> db.stu.update({name:'xiaoyi'},{$unset:{sex:''}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
>
	
	$push
	用法：{$push:{field:value}}
	作用：把value追加到field里。注：field只能是数组类型，如果field不存在，会自动插入一个数组类型

	// 将sons字段压入一个值，将age字段值修改为25
> db.stu.update({name:'xiaoer'},{$push:{sons:5},$set:{age:25}});
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })

	$pushAll
用法：{$pushAll:{field:value_array}}
作用：用法同$push一样，只是$pushAll可以一次追加多个值到一个数组字段内。
	// 一次性插入多个值
> db.stu.update({name:'xiaoer'},{$pushAll:{sons:[1,2,3,4,5,6]}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
>

	$addToSet
用法：{$addToSet:{field:value}}
作用：加一个值到数组内，而且只有当这个值在数组中不存在时才增加。	
	
	// 在sons中插入 [2,3,4,5,6,7,8] 数据不存在时插入
	> db.stu.update({name:'xiaoer'},{$addToSet:{sons:[2,3,4,5,6,7,8]}});
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })


	$pop
用法：删除数组内第一个值：{$pop:{field:-1}}、删除数组内最后一个值：{$pop:{field:1}}
作用：用于删除数组内的一个值


	$pull
	用法：{$pull:{field:_value}}
	作用：从数组field内删除一个等于_value的值

	// 删除sons字段中值为1的数据
> db.stu.update({name:'xiaoer'},{$pull:{sons:1}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
>
	
	$pullAll
用法：{$pullAll:value_array}
作用：用法同$pull一样，可以一次性删除数组内的多个值。

	// 一次性将sons中包含在[2,3,6]的值删除
> db.stu.update({name:'xiaoer'},{$pullAll:{sons:[2,3,6]}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
>

	$rename
用法：{$rename:{old_field_name:new_field_name}}
作用：对字段进行重命名

	// 将sons字段名称改为child
> db.stu.update({name:'xiaoer'},{$rename:{sons:'child'}});
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
>
	
索引操作
	作用：索引能够极大的提高查询效率，特殊的的数据结构 ==> 字段前面的目录结构

	创建索引：

	// 为name创建升序索引，设置唯一
> db.stu.ensureIndex({name:1},{unique:true})
{
        "createdCollectionAutomatically" : false,
        "numIndexesBefore" : 1,
        "numIndexesAfter" : 2,
        "ok" : 1
}
>
	
	

用户权限
	-- admin数据库是管理员信息数据库

--- 添加管理员
	user  用户名称
	pwd	  密码
	roles 	权限
		role 	角色权限 __system 什么权限都有
		db 		对那个数据库起作用 	
> db.createUser({user:'admin',pwd:'123',roles:[{role:'__system',db:'admin'}]})
Successfully added user: {
        "user" : "admin",
        "roles" : [
                {
                        "role" : "__system",
                        "db" : "admin"
                }
        ]
}
>

--- 启动mongo服务时，添加--auth标记，开启权限验证

使用mongo连接服务器之后，在admin数据库下使用db.auth('admin','123')通过认证
	

-- 针对school数据库添加了test用户，具有read的权限
> db.createUser({user:'test',pwd:'123',roles:[{role:'read',db:'school'}]})
Successfully added user: {
        "user" : "test",
        "roles" : [
                {
                        "role" : "read",
                        "db" : "school"
                }
        ]
}
>

-- 连接指定的地址和数据库 使用指定的用户名和密码
C:\Users\xiaohu>mongo 127.0.0.1/school -u test -p 123(回车写是密文)
2016-10-30T00:59:29.967+0800 I CONTROL  [main] Hotfix KB2731284 or later update
is installed, no need to zero-out data files
MongoDB shell version: 3.2.10
connecting to: 127.0.0.1/school
>

数据备份
	mongodump -h IP --port 端口 -u 用户名 -p 密码 -d 数据库 -o 文件存在路径 
数据恢复
	mongorestore -h IP --port 端口 -u 用户名 -p 密码 -d 数据库 --drop 文件存在路径

数据导出
	 mongoexport -d school -c stu -q {} -f _id,name,age,sex --csv > d:/databak.csv
说明：将pagedb数据库中page集合的数据导出到pages.csv文件，其中各选项含义：
-f 指定cvs列名为_id,title,url,spiderName,pubDate
-q 指定查询条件

数据导入
	 mongoimport -d school -c stu --type csv --headerline --drop < d:/databak/csv
